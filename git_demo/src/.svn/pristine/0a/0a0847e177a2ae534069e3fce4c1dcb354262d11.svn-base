-- --------------------------------------------------------------------
-- 
-- 
-- @description:
--      无尽试炼好友援助主界面
-- --------------------------------------------------------------------
LeagueExploreReceiveWindow = LeagueExploreReceiveWindow or BaseClass(BaseView)

local controller = LeagueExploreController:getInstance()
local model = LeagueExploreController:getInstance():getModel()
local string_format = string.format

function LeagueExploreReceiveWindow:__init()
    self.view_tag = ViewMgrTag.DIALOGUE_TAG
    self.win_type = WinType.Big

    self.layout_name = "league_explore/league_explore_receive_window"
    self.selected_tab = nil -- 当前选中的标签
    self.tab_list = {}
    self.panel_list = {}
end

function LeagueExploreReceiveWindow:open_callback()
    self.background = self.root_wnd:getChildByName("background")
    if self.background ~= nil then
        self.background:setScale(display.getMaxScale())
    end

    self.root_csb = self.root_wnd:getChildByName("main_container")
    local main_panel= self.root_csb:getChildByName("main_panel")
    self.close_btn= main_panel:getChildByName("close_btn")

    self.confir_btn = main_panel:getChildByName("confir_btn")


    self.scroll_container = main_panel:getChildByName("scroll_container")
    local size = self.scroll_container:getContentSize()
    local setting = {
        item_class = LeagueExploreReceiveItem,
        start_x = 1,
        space_x = 0,
        start_y = 0,
        space_y = 4,
        item_width = 634,
        item_height = 162,
        row = 0,
        col = 1,
        need_dynamic = true
    }
    self.scroll_view = CommonScrollViewLayout.new(self.scroll_container, cc.p(0, 10), nil, nil, cc.size(size.width, size.height), setting)
end 

function LeagueExploreReceiveWindow:register_event()
   
    if self.background then
        self.background:addTouchEventListener(
            function(sender, event_type)
                if event_type == ccui.TouchEventType.ended then
                    playQuitSound()
                    controller:openReceiveExploreWindow(false) 
                end
            end
        )
    end
    if self.close_btn then
        self.close_btn:addTouchEventListener(
            function(sender, event_type)
                customClickAction(sender,event_type)
                if event_type == ccui.TouchEventType.ended then
                    playQuitSound()
                    controller:openReceiveExploreWindow(false) 

                end
            end
        )
    end
    if self.confir_btn then
        self.confir_btn:addTouchEventListener(
            function(sender, event_type)
                customClickAction(sender,event_type)
                if event_type == ccui.TouchEventType.ended then
                    playQuitSound()
                    controller:openReceiveExploreWindow(false) 

                end
            end
        )
    end
    --  EventManager:getInstance():Bind(Endless_trailEvent.UPDATA_REDPOINT_SENDPARTNER_DATA,self,function()
    --         self:updateTabListRedPoint()
    --  end)
end


function LeagueExploreReceiveWindow:openRootWnd(type)
    self:setData()

end


function LeagueExploreReceiveWindow:setData(data)
    local data ={}

    
    for i=1,2 do 
       table.insert(data,{id =i }) 
    end 

    self.scroll_view:setData(data)
end


function LeagueExploreReceiveWindow:close_callback()
    controller:openReceiveExploreWindow(false)
    EventManager:getInstance():UnBind(self)
end


-- --------------------------------------------------------------------
-- @description:
--      循环赛排行榜单元
--
-- --------------------------------------------------------------------
LeagueExploreReceiveItem = class("LeagueExploreReceiveItem",function()
    return ccui.Layout:create()
end)

function LeagueExploreReceiveItem:ctor()
    self.root_wnd = createCSBNote(PathTool.getTargetCSB("league_explore/league_explore_receive_item"))
    self.size = self.root_wnd:getContentSize()
    self:setAnchorPoint(cc.p(0.5, 0.5))
    self:setContentSize(self.size)

    self.root_wnd:setAnchorPoint(0.5, 0.5)
    self.root_wnd:setPosition(self.size.width * 0.5, self.size.height * 0.5)
    self:addChild(self.root_wnd)

    self.container = self.root_wnd:getChildByName("container")
    self.time_label = self.container:getChildByName("time_label")
    self.title_label = self.container:getChildByName("title_label")
    self.land_label = self.container:getChildByName("land_label")

    self.reward_contanier = createScrollView(600, 100,18, 10, self.container, ScrollViewDir.horizontal)     
    self:registerEvent()
end

function LeagueExploreReceiveItem:registerEvent()
 
end

function LeagueExploreReceiveItem:addCallBack(call_back)
    self.call_back = call_back
end

function LeagueExploreReceiveItem:setData(data)
   
    local titile_str = "今日奖励"
    if data.id == 1 then
         titile_str = "本周奖励"
    end 
    self.title_label:setString(titile_str)

    local refresh = 1642420895 - GameNet:getInstance():getTime()
    if refresh > 0 then
        setCountDownTime(self.time_label,refresh)
    end 
    self:setAwardData()
end

function LeagueExploreReceiveItem:setAwardData(  )
	local award_config = Config.MiscData.data_const["auth_award"]
	if award_config then
        if not  self.item_list  then 
            local data_list = award_config.val
            local setting = {}
            setting.scale = 0.9
            setting.max_count = 3
            setting.is_center = true
            self.item_list = commonShowSingleRowItemList(self.reward_contanier, self.item_list, data_list, setting)
        end
		
	end
end

function LeagueExploreReceiveItem:DeleteMe()
   
    self:removeAllChildren()
    self:removeFromParent()
end


