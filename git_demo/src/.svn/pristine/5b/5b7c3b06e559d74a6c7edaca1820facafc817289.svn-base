-- --------------------------------------------------------------------
-- @description:
--      竖版伙伴装备信息面板
-- <br/> 2018年11月20日
-- --------------------------------------------------------------------
HeroMainTabArtifactsPanel = class("HeroMainTabArtifactsPanel", function()
        return ccui.Widget:create()
    end)

local string_format = string.format
local controller = HeroController:getInstance()
local model = controller:getModel()
local table_insert = table.insert
local role_vo = RoleController:getInstance():getRoleVo()

function HeroMainTabArtifactsPanel:ctor()  


    self:config()
    self:layoutUI()
    self:registerEvents()
end
function HeroMainTabArtifactsPanel:config()
    self.skill_items = {}
    --装备item 列表
    self.equip_item_list = {}
    self.base_list = {}
    self.skill_list = {}
    self.tab_list = {}

    self.equip_type_list = HeroConst.EquipPosList

    self.equip_icon_name_list = {
        [BackPackConst.item_type.WEAPON] = "hero_info_7",  --武器icon
        [BackPackConst.item_type.SHOE] = "hero_info_10",  --鞋子icon
        [BackPackConst.item_type.CLOTHES] = "hero_info_9",  --衣服icon 
        [BackPackConst.item_type.HAT] = "hero_info_8",  --裤子icon
        [5] = "hero_info_11", --武器icon--神器
        [6] = "hero_info_11", --武器icon
    }   

    --神器解锁条件
    self.artifact_lock_list = model.artifact_lock_list
end

function HeroMainTabArtifactsPanel:layoutUI()
    local csbPath = PathTool.getTargetCSB("hero/hero_main_tab_artifacts_panel")
    self.root_wnd = createCSBNote(csbPath)
    self:addChild(self.root_wnd)

    self.size = self.root_wnd:getContentSize()
    self:setContentSize(self.size)

    self.tab_panel = self.root_wnd:getChildByName("tab_panel")

    self.art_node_list = {}
    for i=1,5 do

        self.art_node_list[i] = self.tab_panel:getChildByName("art_node"..i)

        local item = BackPackItem.new(false,true,nil,0.8,false)
        -- 引导需要
        --item:setName("guidesign_equip_item_"..i)
        self.art_node_list[i]:addChild(item,1)
        local size = self.art_node_list[i]:getContentSize()
        item:setPosition(cc.p(size.width/2,size.height/2))
        item:addCallBack(function() self:selectEquipByIndex(i) end)
        local res= PathTool.getResFrame("hero",self.equip_icon_name_list[equip_type])
        local empty_icon = createImage(item:getRoot(), res,60,60, cc.p(0.5,0.5), true, 10, false)
        item.empty_icon = empty_icon

        self.equip_item_list[i] = item
    end


end

function HeroMainTabArtifactsPanel:updatePower()
    --self.fight_label:setNum(self.hero_vo.power)
end

-- @_type 参考 HeroConst.MainInfoTab 定义
function HeroMainTabArtifactsPanel:changeTabType(index)

    if self.cur_tab_index == index then return end

    if self.cur_tab ~= nil then
        self.cur_tab.select_bg:setVisible(false)
    end
    self.cur_tab_index = index

    self.cur_tab = self.tab_list[self.cur_tab_index]

    if self.cur_tab ~= nil then
        self.cur_tab.select_bg:setVisible(true)
    end

    self.tab_panel:setVisible(false)
    self.strong_panel:setVisible(false)
    self.awake_panel:setVisible(false)

    local bg_res
    if self.cur_tab_index == 1 then
        self.tab_panel:setVisible(true)
        bg_res  = PathTool.getSingleImgForDownLoad("bigbg", "hl_bigbg_44", false)
    elseif self.cur_tab_index == 2 then
        self.strong_panel:setVisible(true)
        bg_res  = PathTool.getSingleImgForDownLoad("bigbg", "hl_bigbg_43", false)
    elseif self.cur_tab_index == 3 then
        self.awake_panel:setVisible(true)
        bg_res  = PathTool.getSingleImgForDownLoad("bigbg", "hl_bigbg_42", false)
    end
    self.item_load = loadImageTextureFromCDN(self.background, bg_res, ResourcesType.single, self.item_load) 
    --处理红点
    --self:updatePageRedPoint()
end

--事件
function HeroMainTabArtifactsPanel:registerEvents()

    EventManager:getInstance():Bind(HeroEvent.Hero_Data_Update,self, function(hero_vo)
            if not hero_vo or not self.hero_vo then return end
            if hero_vo.partner_id == self.hero_vo.partner_id then
                self:updateArtifactInfo(self.hero_vo)
            end
        end)
    --神器信息
    EventManager:getInstance():Bind(HeroEvent.Artifact_Update_Event,self, function(vo)
            if not self.hero_vo then return end
            self:updateArtifactInfo(self.hero_vo)
        end)
    EventManager:getInstance():Bind(HeroEvent.Hero_Detail_Data_Update,self, function(hero_vo)
            if not hero_vo then return end
            if hero_vo.partner_id == self.hero_vo.partner_id then
                self:setData(self.hero_vo)
            end
        end)
end


--@ index 索引  如果是装备可以是装备类型 equip_type
function HeroMainTabArtifactsPanel:selectEquipByIndex(index)
    if not self.hero_vo then return end
    --5 ,6 是神器的位置
    local pos = index
    local equip_vo = self.hero_vo.artifact_list[pos]
    --策划要求 原本 6星解锁 改成 7星解锁 .原本6星的已有数据的保留
    -- if equip_vo == nil then
    --     local artifact_lock = self.artifact_lock_list[pos]
    --     if artifact_lock then
    --         if artifact_lock[1] == 'lev' then
    --             if self.hero_vo.lev < artifact_lock[2] then
    --                 message(string_format( TI18N("英雄%s级解锁"),artifact_lock[2]))
    --                 return 
    --             end
    --         elseif artifact_lock[1] == 'star' then
    --             if self.hero_vo.star < artifact_lock[2] then
    --                 message(string_format( TI18N("英雄%s星解锁"),artifact_lock[2]))
    --                 return
    --             end
    --         end
    --     end
    -- end

    -- local equip_vo = self.hero_vo.artifact_list[pos]
    --默认都是主神器 
    if equip_vo and next(equip_vo) ~=nil then 
        controller:openArtifactTipsWindow(true, equip_vo, PartnerConst.ArtifactTips.partner, self.hero_vo.partner_id, pos, false)
    else
        controller:openArtifactListWindow(true, pos, self.hero_vo.partner_id)
    end
end

function HeroMainTabArtifactsPanel:updateSkillItems(equip_vo)

    if self.skill_items then
        for i,item in pairs(self.skill_items) do
            item:setVisible(false)
        end
    end
    if not equip_vo then 
        return
    end
    for i,value in ipairs(equip_vo.extra) do
        if value and value.extra_k and (value.extra_k == 1 or value.extra_k == 2 or value.extra_k == 8) then
            local config = Config.SkillData.data_get_skill(value.extra_v)
            self:updateSkillItem(i,config,self.tab_panel,cc.p(-190 + 330*(i-1),550))
        end
    end
end

--==============================--
--desc:创建技能显示单例
--@index:
--@parent:
--@return 
--==============================--
function HeroMainTabArtifactsPanel:updateSkillItem(index,config, parent,pos)
    self.skill_items =  self.skill_items or {}
    local skill = self.skill_items[index]
    if skill == nil then
        skill = SkillItem.new(true,true,true,0.8)
        parent:addChild(skill)
        self.skill_items[index] = skill

        local name = createLabel(24,cc.c4b(0x6c,0x44,0x3a,0xff),nil,140, 50,"",skill,1,cc.p(0,0))
        local desc = createRichLabel(22,cc.c4b(0x4a,0x23,0x1c,0xff),cc.p(0,1),cc.p(-25, -40),4,nil,260)
        skill:addChild(desc)
        name:setScale(1.2)
        desc:setScale(1.2)
        skill.nameAdd = name
        skill.descAdd = desc
    end
    skill:setVisible(true)
    skill:setPosition(pos)
    skill:setData(config)

    skill.nameAdd:setString(config.name)
    skill.descAdd:setString(transformTextToShort(config.des, 34))

    return item
end

--==============================--
--desc:设置基础属性
--@return 
--==============================--
function HeroMainTabArtifactsPanel:setBaseAttrInfo(data,item_config)
    if not data or not data.attr or not item_config then return end
    local artifact_config = Config.PartnerArtifactData.data_artifact_data[item_config.id]

    local socre_data = Config.PartnerArtifactData.data_artifact_attr_score[item_config.id]

    local index = self.base_lable_index
    for i,v in ipairs(data.attr) do
        local attr_id = v.attr_id
        local attr_key = Config.AttrData.data_id_to_key[attr_id]
        local attr_val = v.attr_val/1000
        local attr_name = Config.AttrData.data_key_to_name[attr_key]
        if attr_name then
            if not self.base_list[index] then 
                self.base_list[index] = createRichLabel(22, cc.c4b(0xc1,0xb7,0xab,0xff), cc.p(0, 0.5), cc.p(100, 285), nil, nil, 380)
                self.tab_panel:addChild(self.base_list[index])
            end
            local label = self.base_list[index]
            local _x = 100 + (index-1)%2 * 300
            local _y = 285 - math.floor((index-1)/2) * 40
            label:setPositionX(_x)
            label:setPositionY(_y)
            label:setVisible(true)
            
            local icon = PathTool.getAttrIconByStr(attr_key)
            local is_per = PartnerCalculate.isShowPerByStr(attr_key)
            if is_per == true then
                attr_val = (attr_val/10).."%"
            end
            local attr_str = string_format("<img src='%s' scale=1 /> <div fontcolor=#eae8d6> %s：</div><div fontcolor=#ffed89>%s</div>", PathTool.getResFrame("common", icon), attr_name, attr_val)
            label:setString(attr_str)
            
            index = index + 1
            self.base_lable_index = self.base_lable_index + 1
        end

        -- if socre_data then
        --     self.score_val = self.score_val + socre_data[attr_key] or 0
        -- end
    end
end



function HeroMainTabArtifactsPanel:setData(hero_vo)
    if not hero_vo then return end
    self.hero_vo = hero_vo
    self:updateInfo(hero_vo)
    self:updateRedPoint()
end

function HeroMainTabArtifactsPanel:updateRedPoint()
    --按钮的红点
    local is_btn_redpoint = false
    --装备红点
    for i,equip_type in ipairs(self.equip_type_list) do
        local is_redpoint = self:updateEachEquipRedPoint(equip_type)
        if not is_btn_redpoint then
            is_btn_redpoint = is_redpoint
        end
    end

    if is_btn_redpoint then
        -- self.key_up_btn:setVisible(true)
        addRedPointToNodeByStatus(self.key_up_btn, is_btn_redpoint, 5, 5)
        -- if self.power_click then
        --     self.power_click:setVisible(false)
        -- end
    else
        addRedPointToNodeByStatus(self.key_up_btn, is_btn_redpoint, 5, 5)
        -- if self.power_click then
        --     self.power_click:setVisible(true)
        -- end
        -- self.key_up_btn:setVisible(false)
    end
    self.is_btn_redpoint = is_btn_redpoint
end

--更新圣器的红点
function HeroMainTabArtifactsPanel:updateArtifactRedPoint()
    --符文(神器) 红点
    if self.lock_list then
        for i,v in ipairs(self.artifact_lock_list) do
            if not self.lock_list[i] then
                local equip_vo = self.hero_vo.artifact_list[i]
                local is_redpoint = HeroCalculate.checkSingleArtifactRedPoint(equip_vo)
                local item = self.equip_item_list[i+4]
                -- item:showRedPoint(is_redpoint)
                addRedPointToNodeByStatus(self.img_box[i], is_redpoint, -1, -10)
                if self.img_box[i].red_point then
                    self.img_box[i].red_point:setScale(0.8 * 100/95)
                end
            else
                addRedPointToNodeByStatus(self.img_box[i], false)    
            end
        end
    end
end

--更新每一个装备红点
function HeroMainTabArtifactsPanel:updateEachEquipRedPoint(equip_type)
    local equip_list = model:getHeroEquipList(self.hero_vo.partner_id)
    local item = self.equip_item_list[equip_type]
    local is_redpoint = HeroCalculate.checkSingleHeroEachPosEquipRedPoint(equip_type, equip_list[equip_type])
    item:showRedPoint(is_redpoint)
    return is_redpoint
end

function HeroMainTabArtifactsPanel:updateInfo(hero_vo)
    if not hero_vo then return end
    --装备信息
    -- local equip_list = model:getHeroEquipList(hero_vo.partner_id)
    -- for i,_type in ipairs(self.equip_type_list) do
    --     local equip_vo = equip_list[_type]
    --     local item = self.equip_item_list[_type]
    --     if equip_vo then
    --         item:setData(equip_vo)
    --         if item.empty_icon then 
    --             item.empty_icon:setVisible(false)
    --         end
    --         item.equip_vo = equip_vo
    --     else
    --         item:setData()
    --         if item.empty_icon then 
    --             item.empty_icon:setVisible(true)
    --         end
    --         item.equip_vo = nil
    --         item:setBackgroundRes(PathTool.getResFrame("hero", "hero_info_32"))
    --     end
    --     -- item:setBackgroundRes(PathTool.getResFrame("hero", "hero_info_32"))
    -- end

    self:updateArtifactInfo(hero_vo)
    self:updatePower()
end

--神器信息
function HeroMainTabArtifactsPanel:updateArtifactInfo( hero_vo )

    if self.base_list then
        for i,item in ipairs(self.base_list) do
            item:setVisible(false)
        end
        self.base_lable_index = 1
    end


    if hero_vo.artifact_list then
        for i=1,5 do
            local item = self.equip_item_list[i]
            local equip_vo = hero_vo.artifact_list[i]
            -- if not self.lock_list[i] and equip_vo then
            --策划要求 原本 6星解锁 改成 7星解锁 .原本6星的已有数据的保留
            if equip_vo then
                item:setData(equip_vo)
                if item.empty_icon then 
                    item.empty_icon:setVisible(false)
                end
                item.equip_vo = equip_vo
                item:setBackgroundOpacity(255)
                --临时，暂时检测第二个按钮
                if i ==2 then
                    self:updateSkillItems(equip_vo)
                end
                self:setBaseAttrInfo(equip_vo,equip_vo.config)
            else
                item:setData()
                if item.empty_icon then 
                    item.empty_icon:setVisible(false)
                end
                item:setBackgroundOpacity(0)
                item.equip_vo = nil
                --临时，暂时检测第二个按钮
                if i ==2 then
                    self:updateSkillItems(nil)
                end
            end
        end
    end

    --self:updateArtifactRedPoint()
end

function HeroMainTabArtifactsPanel:setVisibleStatus(bool)
    self:setVisible(bool)
end


--移除
function HeroMainTabArtifactsPanel:DeleteMe()

    for i,v in pairs(self.skill_items) do 
        if v then 
            v:DeleteMe()
        end
    end

    EventManager:getInstance():UnBind(self)
end
