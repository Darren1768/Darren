--------------------------------------------
-- @description    : 
-- 剧情副本章节地图
---------------------------------
BattleDramaMapWindows = BattleDramaMapWindows or BaseClass(BaseView)

local controller = BattleDramaController:getInstance()
local model = controller:getModel()
local _string_format = string.format

function BattleDramaMapWindows:__init()
    self.win_type = WinType.Big
    self.layout_name = "battledrama/battle_drama_map_windows"

    self.res_list = {
        {path = PathTool.getPlistImgForDownLoad("battledrop", "battledrop"), type = ResourcesType.plist},
    }

    local max_chapter_id = BattleDramaController:getInstance():getModel():getCurMaxChapterId(model:getDramaData().mode)

    local config = require("config.dungeon_scene_data")

    self.all_chapter_data = {}
    self.all_enemy_data = {}
    local index = 1
    for i,v in ipairs(config.building_list) do
        for j,k in ipairs(v.dungeon_list) do
            self.all_chapter_data[index] = {info = k,is_lock = max_chapter_id < k.bid, parent_view = self}
            index = index + 1
        end
    end


    self:updateChapterData()
end

function BattleDramaMapWindows:updateChapterData( chapter_id )
    local chapter = chapter_id or model:getDramaData().chapter_id
    
    self.all_enemy_data = {}
    
    local mapConfig = Config.DungeonData.data_drama_dungeon_getmap
    for i,v in pairs(mapConfig) do
        if v.chapter_id == chapter then
            self.all_enemy_data[i%1000] = {floor =  i%1000,id_list = v.map_avatar[1]}
        end
    end
end

function BattleDramaMapWindows:open_callback()
    self.background = self.root_wnd:getChildByName("background")
    if self.background then
        self.background:setScale(display.getMaxScale())
    end

    local main_container = self.root_wnd:getChildByName("main_container")
    self.main_container = main_container

    local map_node = main_container:getChildByName("map_node")
    local card_node = main_container:getChildByName("card_node")

    self.map_layout = map_node:getChildByName("map_layout")
    self.card_layout = card_node:getChildByName("card_layout")

    self.base_pic = card_node:getChildByName("base_pic")

    self.pos_label = main_container:getChildByName("pos_label")
    self.close_btn = main_container:getChildByName("close_btn")
    self.btn_world = main_container:getChildByName("btn_world")
    self.btn_rule = main_container:getChildByName("btn_rule")

    self.rank_btn = main_container:getChildByName("rank_btn")
    self.rank_btn:getChildByName("name"):setString(TI18N("排行榜"))

    -- 适配
    local top_off = display.getTop(main_container)
    self.btn_rule:setPositionY(top_off - 30)

    local y =  map_node:getPositionY()
    map_node:setPositionY(top_off - (1280 -y))

    y =  card_node:getPositionY()
    card_node:setPositionY(top_off - (1280 -y))

    self.rank_btn:setVisible(true)

    --创建map scroll
    local bgSize = self.map_layout:getContentSize()
    local scroll_view_size = cc.size(bgSize.width, bgSize.height)
    local setting = {
        item_class = BattleDramaMapItem,      -- 单元类
        start_x = 40,                  -- 第一个单元的X起点
        space_x = 0,                    -- x方向的间隔
        start_y = 0,                    -- 第一个单元的Y起点
        space_y = 0,                   -- y方向的间隔
        item_width = 235,               -- 单元的尺寸width
        item_height = 151,              -- 单元的尺寸height
        row = 1,                        -- 行数，作用于水平滚动类型
        col = 1,                         -- 列数，作用于垂直滚动类型
        need_dynamic = true
    }

    self.chapter_scrollview = CommonScrollViewLayout.new(self.map_layout, cc.p(0,0) , ScrollViewDir.horizontal, ScrollViewStartPos.top, scroll_view_size, setting)
    self.chapter_scrollview:setData(self.all_chapter_data)

    --创建node scroll

    local bgSize = self.card_layout:getContentSize()
    local scroll_view_size2 = cc.size(bgSize.width, bgSize.height)
    local setting2 = {
        item_class = BattleDramaNodeItem,      -- 单元类
        start_x = 0,                  -- 第一个单元的X起点
        space_x = 0,                    -- x方向的间隔
        start_y = 0,                    -- 第一个单元的Y起点
        space_y = -5,                   -- y方向的间隔
        item_width = 253,               -- 单元的尺寸width
        item_height = 114,              -- 单元的尺寸height
        row = 1,                        -- 行数，作用于水平滚动类型
        col = 1,                         -- 列数，作用于垂直滚动类型
        need_dynamic = false
    }




    self.enemy_scrollview = CommonScrollViewLayout.new(self.card_layout, cc.p(0,0) , ScrollViewDir.vertical, ScrollViewStartPos.top, scroll_view_size2, setting2)
    self.enemy_scrollview:setData(self.all_enemy_data)

    local y = self.card_layout:getPositionY() - setting2.item_height *#self.all_enemy_data - setting2.space_y *(#self.all_enemy_data -1)
    self.base_pic:setPositionY(y )
end

function BattleDramaMapWindows:register_event()
    registerButtonEventListener(self.close_btn, handler(self, self._onClickCloseBtn), true, 2)
    registerButtonEventListener(self.btn_world, handler(self, self._onClickWorldBtn), true)
    registerButtonEventListener(self.rank_btn, handler(self, self._onClickRankBtn), true, 1)
    registerButtonEventListener(self.btn_rule, handler(self, self._onClickRuleBtn), true, 1)
end



function BattleDramaMapWindows:_onClickCloseBtn(  )
    controller:openBattleDramaMapWindows(false)
end


function BattleDramaMapWindows:_onClickRuleBtn(  )
    WorldmapController:getInstance():openWorldMapTipsWindow(true,self.chapter_id,WorldmapEvent.open_type.open_type_4)
end

function BattleDramaMapWindows:_onClickRankBtn(  )
    RankController:getInstance():openRankView(true, RankConstant.RankType.drama)
end

function BattleDramaMapWindows:_onClickWorldBtn(  )
    WorldmapController:getInstance():openWorldMapMainWindow(true)
end

function BattleDramaMapWindows:openRootWnd( chapter_id )
    self.drama_data = model:getDramaData()
    if self.drama_data and next(self.drama_data) ~= nil then
        self.chapter_id = chapter_id or self.drama_data.chapter_id
        controller:send13020()
    end
end

function BattleDramaMapWindows:updateCardNode( data )

end

function BattleDramaMapWindows:createRole( action_name )
    if not tolua.isnull(self.spine_model) then
        self.spine_model:runAction(cc.RemoveSelf:create(true))
        self.spine_model = nil
    end
    if not self.spine_model then
        self.cur_action_name = action_name
        local look_id = RoleController:getInstance():getRoleVo().look_id
        local look_config = Config.LooksData.data_data[look_id]
        local res_id = "H30009" -- 默认显示该模型
        if look_config then
            res_id = look_config.ico_id or res_id
        end
        self.spine_model = createSpineByName(res_id, action_name)
        self.spine_model:setPosition(self.cur_tag_container:getContentSize().width / 2, -15)
        self.spine_model:setScaleX(0.7 * self:getDir())
        self.spine_model:setScaleY(0.7)
        self.cur_tag_container:addChild(self.spine_model)
        self.spine_model:setAnimation(0, action_name, true)
        self.spine_model:update(0)
        local height = self.spine_model:getBoundingBox().height or 85
        if not self.cur_effect then
            self.cur_effect = createEffectSpine(Config.EffectData.data_effect_info[105], cc.p(25, 130), cc.p(0.5, 0.5), true, PlayerAction.action, nil, cc.TEXTURE2_D_PIXEL_FORMAT_RGB_A8888)
            self.cur_tag_container:addChild(self.cur_effect)
        end
        if self.cur_effect then
            self.cur_effect:setPosition(25,height)
        end

        if not self.progress_bg then
            self.progress_bg = createSprite(PathTool.getResFrame("battledrop", "battledrop_6"),self.cur_tag_container:getContentSize().width / 2, -35, self.cur_tag_container, cc.p(0.5, 0.5), LOADTEXT_TYPE_PLIST)
            self.progress_bg:setScaleX(9.4)
        end
        if not self.progress_label then
            self.progress_label = createRichLabel(16, 1, cc.p(0.5, 0.5), cc.p(self.cur_tag_container:getContentSize().width / 2, -35))
            self.cur_tag_container:addChild(self.progress_label)
            self.progress_label:setString(TI18N("已超过<div fontcolor=5df660>?</div>的玩家进度"))
        end
    end
end

function BattleDramaMapWindows:getDir()
    local scale = 1
    local item = self.main_point_list[self.drama_data.dun_id]
    if item then
        local max_item = self.main_point_list[self.drama_data.max_dun_id]
        local cur_x = item:getPositionX()
        local max_x = 0
        if max_item then
            max_x = max_item:getPositionX()
        end
        if cur_x > max_x then
            scale = 1
        else
            scale = -1
        end
    end
    return scale
end

function BattleDramaMapWindows:updateMapPointStatus()
    self.drama_data = model:getDramaData()
    if self.drama_data then
        local v_data = model:getCurDunInfoByMapID(self.drama_data.map_id)
        local config = Config.DungeonData.data_drama_dungeon_info(self.drama_data.dun_id)
        if config then
            if self.main_point_list and self.main_point_list[self.drama_data.dun_id] then
                local item = self.main_point_list[self.drama_data.dun_id]
                local is_big = config.is_big
                item:updateStatus(v_data.status, is_big)
            end

            if not self.is_move_start then
                self:moveMapTag()
                self.is_move_start = true
            end
        end
    end
end

-- 移动角色形象
function BattleDramaMapWindows:moveMapTag( is_start )
    if self.drama_data then
        local info_config = Config.DungeonData.data_drama_dungeon_info(self.drama_data.dun_id)
        if info_config then
            local cur_main_point = info_config.pos
            if cur_main_point then
                if not is_start then
                    self.cur_tag_container:setPosition(cur_main_point[1], cur_main_point[2] + BattleDramaMainPointItem.HEIGHT / 2 + 10)
                else
                    self.cur_tag_container:runAction(cc.Sequence:create(cc.DelayTime:create(0.1),cc.Spawn:create(cc.CallFunc:create(function()
                                        self:createRole(PlayerAction.run)
                                    end),cc.MoveTo:create(0.5, cc.p(cur_main_point[1], cur_main_point[2] + BattleDramaMainPointItem.HEIGHT / 2 + 10))),cc.CallFunc:create(function ()
                                    self:createRole(PlayerAction.battle_stand)
                                end)))
                end
            end
        end
    end
end

function BattleDramaMapWindows:close_callback(  )
    if self.resources_load then
        self.resources_load:DeleteMe()
        self.resources_load = nil
    end

    if self.main_point_list then
        for k, v in pairs(self.main_point_list) do
            if v then
                v:DeleteMe() 
            end
        end
    end

    if not tolua.isnull(self.spine_model) then
        self.spine_model:runAction(cc.RemoveSelf:create(true))
        self.spine_model = nil
    end

    if self.cur_effect then
        self.cur_effect:clearTracks()
        self.cur_effect:removeFromParent()
        self.cur_effect = nil
    end

    if self.background then
        self.background:removeAllChildren()
        self.background:stopAllActions()
    end

    controller:openBattleDramaMapWindows(false)
end



BattleDramaMapItem = class("BattleDramaMapItem", function()
        return ccui.Widget:create()
    end)

function BattleDramaMapItem:ctor()
    self:configUI()
    self:register_event()
end

function BattleDramaMapItem:configUI(  )
    self.size = cc.size(235,151)
    self:setTouchEnabled(false)
    self:setContentSize(self.size)

    local csbPath = PathTool.getTargetCSB("battledrama/battle_drama_map_item")
    self.root_wnd = createCSBNote(csbPath)
    self:addChild(self.root_wnd)

    local container = self.root_wnd:getChildByName("main_container")
    self.container = container

    self.bg = container:getChildByName("bg")
    self.name = container:getChildByName("name")
    self.lock = container:getChildByName("lock")
end

function BattleDramaMapItem:register_event(  )
    registerButtonEventListener(self.bg, handler(self, self._onClickChapter), false, 1)
    self.bg:setSwallowTouches(false)
end

function BattleDramaMapItem:setData( data )
    if not data then return end
    self.data = data
    self.lock:setVisible(data.is_lock)
    local name = '第'..StringUtil.numToChinese(data.info.bid)..'章'
    self.name:setString(StringUtil.branchStr(name))
    if data.is_lock then
        self.bg:setColor(cc.c3b(120,120,120))
    else
        self.bg:setColor(cc.c3b(255,255,255))
    end

end

function BattleDramaMapItem:_onClickChapter(  )
    if self.data.is_lock then
    end

    if self.data.parent_view.updateCardNode then
        self.data.parent_view:updateCardNode(self.data.info)
    end
end


BattleDramaNodeItem = class("BattleDramaNodeItem", function()
        return ccui.Widget:create()
    end)

function BattleDramaNodeItem:ctor()
    self:configUI()
    self:register_event()
end

function BattleDramaNodeItem:configUI(  )
    self.size = cc.size(253,114)
    self:setTouchEnabled(false)
    self:setContentSize(self.size)

    local csbPath = PathTool.getTargetCSB("battledrama/battle_drama_node_item")
    self.root_wnd = createCSBNote(csbPath)
    self:addChild(self.root_wnd)

    local container = self.root_wnd:getChildByName("main_container")
    self.name = container:getChildByName('name')
    self.title_pic = container:getChildByName('title_pic')
    self.head_box_list = {}
    self.head_icon_list = {}
    for i=1,3 do
        self.head_box_list[i] = container:getChildByName('head_box_'..i)
        self.head_icon_list[i] = container:getChildByName('head_icon_'..i)
    end

end

function BattleDramaNodeItem:register_event(  )

end

function BattleDramaNodeItem:setData( data )

    --最多3个
    for i=1,3 do
        if data.id_list[i] then
            local res = PathTool.getHeadIcon(data.id_list[i])
            self.head_icon_list[i]:loadTexture( res, LOADTEXT_TYPE)

            self.head_icon_list[i]:setVisible(true)
            self.head_box_list[i]:setVisible(true)
        else
            self.head_icon_list[i]:setVisible(false)
            self.head_box_list[i]:setVisible(false)
        end
    end

    self.title_pic:setVisible(data.floor ~= 1)
    self.name:setVisible(data.floor ~= 1)

    self.name:setString(StringUtil.numToChinese(data.floor))
end

function BattleDramaNodeItem:DeleteMe(  )

end

