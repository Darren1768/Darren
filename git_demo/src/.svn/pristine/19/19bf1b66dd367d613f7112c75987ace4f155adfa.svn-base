-- --------------------------------------------------------------------
-- @description:
--      ÃÂªÃƒÃ‹Ã•Â½Ã–¡ÂÂ½Ã§ÃƒÃ¦
-- --------------------------------------------------------------------
GuildwarMainWindow = GuildwarMainWindow or BaseClass(BaseView)

local controller = GuildwarController:getInstance()
local model = controller:getModel()

function GuildwarMainWindow:__init()
	
    self.win_type = WinType.Full
	self.layout_name = "guildwar/guildwar_main_window"

	self.res_list = {
		{path = PathTool.getPlistImgForDownLoad("guildwar", "guildwar"), type = ResourcesType.plist},
        {path = PathTool.getSingleImgForDownLoad("bigbg/guildwar","guildwar_1"), type = ResourcesType.single },
        {path = PathTool.getSingleImgForDownLoad("bigbg/guildwar","guildwar_2"), type = ResourcesType.single },
	}

	self.cur_position_type = GuildwarConst.positions.others -- Âµ¡ÀÃ‡¡ãÃ•¨®ÂµÃ˜Ã€¨¤ÃÃ
    self.position_vo_data = {} -- Â¾ÃÂµÃ£ÃŠÃ½Â¾Ã
    self.position_stack = {}   -- Â´Â´Â½¡§ÂµÃ„Â¾ÃÂµÃ£
    self.position_pool = {}    -- Â»ÂºÂ´Ã¦Â³Ã˜Ã–ÃÂµÃ„Â¾ÃÂµÃ£
    self.position_pos = {}     -- Ã•Ã½Ã”ÃšÃÃ”ÃŠÂ¾Ã–ÃÂµÃ„Â¾ÃÂµÃ£
    self.map_bgs = {}          -- ÂµÃ˜ÃÂ¼¡ÁÃŠÃ”Â´
    self.top3_item_list = {}
end 

function GuildwarMainWindow:open_callback()
    self.background = self.root_wnd:getChildByName("background")
    self.background:setScale(display.getMaxScale())

    self.main_container = self.root_wnd:getChildByName("main_container")
    self:playEnterAnimatianByObj(self.main_container, 1)
    self.map_layer = self.main_container:getChildByName("map_layer")

    self.show_panel = self.main_container:getChildByName("show_panel")
    self.state_panel = self.main_container:getChildByName("state_panel")
    self.top_panel = self.main_container:getChildByName("top_panel")

    self.myguild_container = self.show_panel:getChildByName("myguild_container")
    self.enemyguild_container = self.show_panel:getChildByName("enemyguild_container")

    self.rank_container = self.show_panel:getChildByName("rank_container")
    self.title_container = self.show_panel:getChildByName("title_container")
    self.buff_container = self.show_panel:getChildByName("buff_container")

    local title_label = self.top_panel:getChildByName("title_label")
    title_label:setString(TI18N("Â¹Â«Â»¨¢Ã•Â½"))

    self.battle_list_btn = self.show_panel:getChildByName("battle_list_btn")
    self.battle_list_btn_label = self.battle_list_btn:getChildByName("label")
    self.battle_list_btn_label:setString(TI18N("Â¶Ã”Ã•¨®ÃÃ¡À¨ª"))

    self.attk_check_btn = self.show_panel:getChildByName("attk_check_btn")
    self.attk_check_btn_label = self.attk_check_btn:getChildByName("label")
    self.attk_check_btn_label:setString(TI18N("Â½Ã¸Â¹Â¥Ã’Â»Ã€Ã€"))

    self.ally_atk_btn = self.show_panel:getChildByName("ally_atk_btn")
    self.ally_atk_btn_label = self.ally_atk_btn:getChildByName("label")
    self.ally_atk_btn_label:setString(TI18N("Â½Ã¸Â¹Â¥ÃˆÃ•Ã–Â¾"))

    self.look_award_btn = self.show_panel:getChildByName("look_award_btn")
    self.look_award_btn_label = self.look_award_btn:getChildByName("label")
    self.look_award_btn_label:setString(TI18N("ÃÃ¦¡¤¡§Â½¡ÀÃ€Ã¸"))

    local tips_label_1 = self.buff_container:getChildByName("tips_label_1")
    tips_label_1:setString(TI18N("ÃŒÃ´Ã•Â½Â¾ÃÂµÃ£¡¤ÃÃÃ¦Â¿Ã‰Â¼¡èÂ»Ã®Â»¨°ÃŒ¨¢Ã‰Ã½ÃˆÂ«Â¹Â«Â»¨¢Ã”Ã¶Ã’Ã¦"))
    
    self.change_scene_btn = self.show_panel:getChildByName("change_scene_btn")
    self.change_scene_btn_label = self.change_scene_btn:getChildByName("label")
    self.change_scene_btn_label:setString(TI18N("ÂµÃ¡¤Â½Ã•¨®ÂµÃ˜"))

    self.award_box_btn = self.show_panel:getChildByName("award_box_btn")
    self.award_box_btn:getChildByName("label"):setString(TI18N("Ã•Â½Â¹Ã»¡ÀÂ¦ÃÃ¤"))

    self.clash_list_btn = self.state_panel:getChildByName("clash_list_btn")
    self.clash_list_btn:setTitleText(TI18N("Â¶Ã”Ã•¨®ÃÃ¡À¨ª"))
    self.clash_list_btn_label = self.clash_list_btn:getTitleRenderer()
    if self.clash_list_btn_label ~= nil then
        self.clash_list_btn_label:enableOutline(Config.ColorData.data_color4[263], 2)
    end

    self.look_box_btn = self.state_panel:getChildByName("look_box_btn")
    self.look_box_btn:getChildByName("label"):setString(TI18N("Ã•Â½Â¹Ã»¡ÀÂ¦ÃÃ¤"))

    local rank_desc_label = self.rank_container:getChildByName("rank_desc_label")
    rank_desc_label:setString(TI18N("Ã•Â½Â¼¡§Ã…Ã…ÃÃ¡ãÃ±"))

    self.rank_btn = self.rank_container:getChildByName("rank_btn")
    self.close_btn = self.top_panel:getChildByName("close_btn")
    self.explain_btn = self.top_panel:getChildByName("explain_btn")

    self.time_label = self.title_container:getChildByName("time_label")
    self.challenge_label = self.title_container:getChildByName("challenge_label")
    self.state_tips_label = self.state_panel:getChildByName("state_tips_label")
    self.buff_lv_label = self.buff_container:getChildByName("buff_lv_label")
    self.buff_icon = self.buff_container:getChildByName("buff_icon")

    self.my_guild_name_label = self.myguild_container:getChildByName("guild_name_label_1")
    self.my_guild_star_label = self.myguild_container:getChildByName("star_label_1")
    self.my_guild_win = self.myguild_container:getChildByName("image_win_1")
    self.my_guild_dogfall = self.myguild_container:getChildByName("image_dogfall_1")
    self.enemy_guild_name_label = self.enemyguild_container:getChildByName("guild_name_label_2")
    self.enemy_guild_star_label = self.enemyguild_container:getChildByName("star_label_2")
    self.enemy_guild_win = self.enemyguild_container:getChildByName("image_win_2")
    self.enemy_guild_dogfall = self.enemyguild_container:getChildByName("image_dogfall_2")

    -- ÃŠÃŠÃ…Ã¤
    self:adjustPanlePosition()

    self.map_size = cc.size(720,1280*6)
    self.map_layer:setContentSize(self.map_size)
    self.map_layer:setPosition(cc.p(self.map_layer_posX, (self.free_size.height - self.map_size.height + self.map_layer_posY)))
    self:addMapImage()
end

function GuildwarMainWindow:adjustPanlePosition(  )
    local top_height = display.getTop()
    local top_view_height = MainuiController:getInstance():getMainUi():getTopViewHeight()
    local free_size_height = MainuiController:getInstance():getMainUi():getFreeSize()
    self.free_size = cc.size(SCREEN_WIDTH, free_size_height)
    self.main_container_size = self.main_container:getContentSize()

    local off_bottom = math.abs(display.getBottom(self.main_container))
    local off_left = display.getLeft(self.main_container)
    local off_right = display.getRight(self.main_container)-self.main_container_size.width
    local old_pos_x, old_pos_y = self.map_layer:getPosition()

    self.map_scalex = display.getScale()
    self.map_layer_posX = old_pos_x+off_left
    self.map_layer_posY = old_pos_y-off_bottom
    self.map_layer:setPosition(cc.p(self.map_layer_posX, self.map_layer_posY))
    self.map_layer:setScaleX(self.map_scalex)

    local top_panel_posY = display.getTop(self.main_container)-top_view_height-30
    local offset_y = top_panel_posY - self.top_panel:getPositionY() -- yÃ–¨¢Ã†Â«Ã’Ã†
    self.top_panel:setPositionY(top_panel_posY)
    self.title_container:setPositionY(self.title_container:getPositionY()+offset_y)
    self.state_panel:setContentSize(cc.size(self.free_size.width, display.height))
    -- self.state_panel:setPosition(cc.p(self.main_container_size.width/2, display.height*0.5))
    self.state_tips_label:setPosition(cc.p(self.free_size.width/2, display.height/2+20))
    self.clash_list_btn:setPosition(cc.p(self.free_size.width/2, display.height/2-60))
    self.look_box_btn:setPositionY(top_panel_posY-117)

    self.myguild_container:setPosition(cc.p(self.myguild_container:getPositionX()+off_left,self.myguild_container:getPositionY()+offset_y))
    self.enemyguild_container:setPosition(cc.p(self.enemyguild_container:getPositionX()+off_right,self.enemyguild_container:getPositionY()+offset_y))
    self.rank_container:setPosition(cc.p(self.rank_container:getPositionX()+off_left,self.rank_container:getPositionY()+offset_y))
    self.buff_container:setPosition(cc.p(self.buff_container:getPositionX()+off_left,self.buff_container:getPositionY()-off_bottom))
    self.ally_atk_btn:setPosition(cc.p(self.ally_atk_btn:getPositionX()+off_left,self.ally_atk_btn:getPositionY()+offset_y))
    self.look_award_btn:setPosition(cc.p(self.look_award_btn:getPositionX()+off_left,self.look_award_btn:getPositionY()+offset_y))
    self.award_box_btn:setPosition(cc.p(self.award_box_btn:getPositionX()+off_left,self.award_box_btn:getPositionY()+offset_y))
    self.change_scene_btn:setPosition(cc.p(self.change_scene_btn:getPositionX()+off_right,self.change_scene_btn:getPositionY()-off_bottom))
    self.battle_list_btn:setPosition(cc.p(self.battle_list_btn:getPositionX()+off_right,self.battle_list_btn:getPositionY()+offset_y))
    self.attk_check_btn:setPosition(cc.p(self.attk_check_btn:getPositionX()+off_right,self.attk_check_btn:getPositionY()+offset_y))
end

function GuildwarMainWindow:openRootWnd(  )
	local flag = model:getGuildWarEnemyFlag()
    local status = model:getGuildWarStatus()

    self:refreshGuildWarStatus()
    self:updateMainRedStatus()

	-- Â´¨°Â¿ÂªÂ½Ã§ÃƒÃ¦ÃŠ¡ÀÃ…ÃÂ¶ÃÂ£Â¬ÃˆÃ§Â¹Ã»Ã“ÃÃ†Â¥Ã…Ã¤ÂµÂ½Â¶Ã”ÃŠÃ–Ã‡Ã’¡ÁÂ´ÃŒÂ¬ÃÂªÂ¿ÂªÃ•Â½Ã–ÃÂ»¨°Â½¨¢Ã‹Ã£Â£Â¬ÂµÂ«ÃÃÂ»ÂºÂ´Ã¦ÃŠÃ½Â¾ÃÂ£Â¬Ã”¨°Ã‡Ã«Ã‡¨®ÃŠÃ½Â¾Ã
	
    print("-------------flag-------1---------",flag)
    print("-------------flag---------2-------",status)
    print("-------------flag--------3--------", model:checkIsHaveEnemyCacheData() )

    if flag == TRUE and status > GuildwarConst.status.showing and not model:checkIsHaveEnemyCacheData() then
        print("------1--------------")
		controller:requestGuildWarData()
    else
        print("-------2-------------")

        self:refreshGuildWarPosition()
        self:refreshStarAndBuffInfo()
        self:refreshTopThreeRank()
        self:refreshChallengeCount()
	end
end

-- ¡ÁÂ´ÃŒÂ¬Ã‹Â¢ÃÃ‚
function GuildwarMainWindow:refreshGuildWarStatus(  )
	local status = model:getGuildWarStatus()
	local isShowTips = false
	local tips_str = ""
    self.clash_list_btn:setVisible(false)
    local flag = model:getGuildWarEnemyFlag()
	if status == GuildwarConst.status.close then
		isShowTips = true
		tips_str = TI18N("Â¹Â«Â»¨¢Ã•Â½Ã”ÃÃÂ´Â¿ÂªÃŠÂ¼Â£Â¬Ã‡Ã«Ã”ÃšÃƒÂ¿Ã–ÃœÃ’Â»Â¡Â¢Ã–ÃœÃˆÃ½Â¡Â¢Ã–ÃœÃÃ¥12:00-20:00¡ÁÂ¼ÃŠ¡ÀÂ²ÃÂ¼Ã“Ã…Â¶Â£Â¡Â£¡§Ã¯Â¾Å¸Ã¢Ë†â‚¬Ã¯Â¾Å¸Â£Â©¡èÃ„")
        -- Ã‹¨´Ã“ÃÂ¾ÃÂµÃ£Â¶Â¼¡¤Ã…ÃˆÃ«Â»ÂºÂ´Ã¦Â³Ã˜Ã–Ã
        for i=#self.position_stack, 1, -1 do
            local item = table.remove(self.position_stack, i)
            local pos = item:getPositionPos()
            item:setVisible(false)
            item:suspendAllActions()
            table.insert(self.position_pool, item)
            self.position_pos[pos] = nil
        end
	elseif status == GuildwarConst.status.matching then
		isShowTips = true
		tips_str = TI18N("Ã•Ã½Ã”ÃšÃ†Â¥Ã…Ã¤Â£Â¬Ã‡Ã«Ã„ÃÃÃ„ÂµÃˆÂ´Ã½")
	elseif status == GuildwarConst.status.showing then
		if flag == TRUE then 
			tips_str = TI18N("Â¹Â«Â»¨¢Ã•Â½Ã”ÃÃÂ´Â¿ÂªÃŠÂ¼Â£Â¬Ã‡Ã«Ã”ÃšÃƒÂ¿Ã–ÃœÃ’Â»Â¡Â¢Ã–ÃœÃˆÃ½Â¡Â¢Ã–ÃœÃÃ¥12:00-20:00¡ÁÂ¼ÃŠ¡ÀÂ²ÃÂ¼Ã“Ã…Â¶Â£Â¡Â£¡§Ã¯Â¾Å¸Ã¢Ë†â‚¬Ã¯Â¾Å¸Â£Â©¡èÃ„")
		else -- ÃÂ´Ã†Â¥Ã…Ã¤ÂµÂ½Â¶Ã”ÃŠÃ–
			tips_str = TI18N("ÂºÃœÃ’Ã…ÂºÂ¶Â£Â¬Ã„¨²ÂµÃ„Â¹Â«Â»¨¢Ã”ÃšÂ´Ã‹Â´ÃÂ¹Â«Â»¨¢Ã•Â½Ã–ÃÃ†Â¥Ã…Ã¤Ã‚Ã–Â¿Ã•Â»¨°Â»Ã®Ã”Â¾ÃˆÃ‹ÃŠÃ½ÃÂ´Â´Ã¯¡À¨ºÂ£Â¬Ã‡Ã«Ã†ÃšÂ´Ã½ÃÃ‚Â´ÃÂ£Â¡(¡èÃ„¡ìÃ•Â¡Ã‰)")
		end
        self.clash_list_btn:setVisible(true)
        isShowTips = true
	elseif status == GuildwarConst.status.processing then
        if flag == TRUE then
            isShowTips = false
        else -- ÃÂ´Ã†Â¥Ã…Ã¤ÂµÂ½Â¶Ã”ÃŠÃ–
            tips_str = TI18N("ÂºÃœÃ’Ã…ÂºÂ¶Â£Â¬Ã„¨²ÂµÃ„Â¹Â«Â»¨¢Ã”ÃšÂ´Ã‹Â´ÃÂ¹Â«Â»¨¢Ã•Â½Ã–ÃÃ†Â¥Ã…Ã¤Ã‚Ã–Â¿Ã•Â»¨°Â»Ã®Ã”Â¾ÃˆÃ‹ÃŠÃ½ÃÂ´Â´Ã¯¡À¨ºÂ£Â¬Ã‡Ã«Ã†ÃšÂ´Ã½ÃÃ‚Â´ÃÂ£Â¡(¡èÃ„¡ìÃ•Â¡Ã‰)")
            isShowTips = true
            self.clash_list_btn:setVisible(true)
        end
	elseif status == GuildwarConst.status.settlement then
		if flag == TRUE then
            isShowTips = false
        else -- ÃÂ´Ã†Â¥Ã…Ã¤ÂµÂ½Â¶Ã”ÃŠÃ–
            tips_str = TI18N("ÂºÃœÃ’Ã…ÂºÂ¶Â£Â¬Ã„¨²ÂµÃ„Â¹Â«Â»¨¢Ã”ÃšÂ´Ã‹Â´ÃÂ¹Â«Â»¨¢Ã•Â½Ã–ÃÃ†Â¥Ã…Ã¤Ã‚Ã–Â¿Ã•Â»¨°Â»Ã®Ã”Â¾ÃˆÃ‹ÃŠÃ½ÃÂ´Â´Ã¯¡À¨ºÂ£Â¬Ã‡Ã«Ã†ÃšÂ´Ã½ÃÃ‚Â´ÃÂ£Â¡(¡èÃ„¡ìÃ•Â¡Ã‰)")
            isShowTips = true
            self.clash_list_btn:setVisible(true)
        end
	end

	self.guildwar_status = status

	if isShowTips then
		self.state_tips_label:setString(tips_str)
	end

	self.show_panel:setVisible(not isShowTips)
	self.state_panel:setVisible(isShowTips)
	self:refreshSurplusTime()
    self:refreshChallengeCount()
end

-- Â¼Ã“Ã”Ã˜Ã•¨®ÂµÃ˜ÂµÃ˜ÃÂ¼¡ÁÃŠÃ”Â´(Ã–Â»Â´Â´Â½¡§3Ã•Ã…Â£Â¬Â¶Â¯ÃŒÂ¬Âµ¡ÂÃ•Ã»ÃÂ»Ã–ÃƒÃ–Ã˜Â¸Â´ÃŠÂ¹Ã“Ãƒ)
function GuildwarMainWindow:addMapImage(  )
    for i=1,3 do
        local pos_y = (6-i)*1280
        local map_bg = createSprite(PathTool.getSingleImgForDownLoad("bigbg/guildwar", "guildwar_1"),0,pos_y,self.map_layer,cc.p(0, 0), LOADTEXT_TYPE)
        map_bg:setScaleX(self.map_scalex)
        table.insert(self.map_bgs, map_bg)
    end
    self:dynamicAddMapImage()
end

function GuildwarMainWindow:getTopOrBottomMapBgPosY( flag )
    local value
    for k,mapbg in pairs(self.map_bgs) do
        local pos_y = mapbg:getPositionY()
        value = value or pos_y
        if flag == 1 and pos_y > value then
            value = pos_y
        elseif flag == 2 and pos_y < value then
            value = pos_y
        end
    end
    return value
end

-- Â¶Â¯ÃŒÂ¬Âµ¡ÂÃ•Ã»ÂµÃ˜ÃÂ¼ÃÂ»Ã–Ãƒ
function GuildwarMainWindow:dynamicAddMapImage(  )
    local map_pos_y = self.map_layer:getPositionY()
    map_pos_y = math.abs(map_pos_y)
    local offset_y = 200
    for k,mapbg in pairs(self.map_bgs) do
        local bg_pos_y = mapbg:getPositionY()
        if (bg_pos_y+offset_y) < (map_pos_y-1280) then
            mapbg:setPositionY(self:getTopOrBottomMapBgPosY(1)+1280)
        elseif (bg_pos_y-offset_y)>(map_pos_y+1280) then
            mapbg:setPositionY(self:getTopOrBottomMapBgPosY(2)-1280)
        end
    end
end

function GuildwarMainWindow:moveMapLayer( x, y )
	x = self.map_layer:getPositionX() + x
    y = self.map_layer:getPositionY() + y
    local return_pos = self:checkMapLayerPoint(x,y)
    if self.bottom_position_pos_y and return_pos.y <= -(self.bottom_position_pos_y-300) then
        self.map_layer:setPosition(return_pos.x,return_pos.y)
        return true
    else
        return false
    end
end

function GuildwarMainWindow:checkMapLayerPoint( _x, _y )
	local return_pos = cc.p(_x,_y)
    if return_pos.x > self.map_layer_posX then
        return_pos.x = self.map_layer_posX
    elseif return_pos.x < (self.free_size.width-self.map_size.width + self.map_layer_posX) then
        return_pos.x = (self.free_size.width-self.map_size.width + self.map_layer_posX)
    end
    if return_pos.y < (self.free_size.height - self.map_size.height + self.map_layer_posY)  then
        return_pos.y = (self.free_size.height - self.map_size.height + self.map_layer_posY)
    elseif return_pos.y >= self.map_layer_posY  then 
        return_pos.y = self.map_layer_posY
    end
    return return_pos
end

-- ÃŠÂ£Ã“¨¤ÃŠ¡ÀÂ¼Ã¤ÃÃ”ÃŠÂ¾
function GuildwarMainWindow:refreshSurplusTime(  )
	self.surplusTime = model:getGuildWarSurplusTime()
    if self.surplusTime < 0 then
        self.surplusTime = 0
    end
	self.time_label:setString(TimeTool.GetTimeFormatDayIIIIIIII(self.surplusTime))
	self:openGuildWarSurplusTimer(true)
end

-- Â»Ã®Â¶Â¯ÃŠÂ£Ã“¨¤ÃŠ¡ÀÂ¼Ã¤ÂµÂ¹Â¼Ã†ÃŠ¡À
function GuildwarMainWindow:openGuildWarSurplusTimer( status )
	if status == true then
		if self.guildwar_timer == nil then
            self.guildwar_timer = GlobalTimeTicket:getInstance():add(function()
                self.surplusTime = self.surplusTime - 1
                if self.surplusTime >= 0 then
                	self.time_label:setString(TimeTool.GetTimeFormatDayIIIIIIII(self.surplusTime))
                else
                	self.surplusTime = 0
                	GlobalTimeTicket:getInstance():remove(self.guildwar_timer)
            		self.guildwar_timer = nil
                end
            end, 1)
        end
	else
		if self.guildwar_timer ~= nil then
            GlobalTimeTicket:getInstance():remove(self.guildwar_timer)
            self.guildwar_timer = nil
        end
	end
end

-- ÃŠÂ£Ã“¨¤Â´ÃÃŠÃ½Ã‹Â¢ÃÃ‚
function GuildwarMainWindow:refreshChallengeCount(  )
    if self.guildwar_status == GuildwarConst.status.settlement then
        self.challenge_label:setString(TI18N("Âº¨®Â¹Ã˜¡ÀÃ•"))
    else
        local count = model:getGuildWarChallengeCount()
        local max_count = Config.GuildWarData.data_const.challange_time_limit.val
        self.challenge_label:setString(string.format(TI18N("ÃŒÃ´Ã•Â½Â´ÃÃŠÃ½:%d/%d"), (max_count-count), max_count))
    end
end

-- Ã‹Â¢ÃÃ‚Ã‹Â«¡¤Â½ÃÃ‡ÃŠÃ½Â¡Â¢Â½¨¢Â¹Ã»ÂºÃbuffÃÃ…ÃÂ¢
function GuildwarMainWindow:refreshStarAndBuffInfo(  )
	local myGuildData = model:getMyGuildWarBaseInfo()
	self.my_guild_name_label:setString(myGuildData.gname or "")
	self.my_guild_star_label:setString(myGuildData.hp or 0)

    local buff_lev = myGuildData.buff_lev or 0
    local max_level = Config.GuildWarData.data_buff_length
    self.buff_lv_label:setString(string.format(TI18N("%d/%dÂ¼Â¶"), buff_lev, max_level))

	local enemyGuildData = model:getEnemyGuildWarBaseInfo()
	self.enemy_guild_name_label:setString(enemyGuildData.gname or "")
	self.enemy_guild_star_label:setString(enemyGuildData.hp or 0)

	local result = model:getGuildWarResult()
	self.my_guild_win:setVisible(result == GuildwarConst.result.win)
	self.my_guild_dogfall:setVisible(result == GuildwarConst.result.dogfall)
	self.enemy_guild_win:setVisible(result == GuildwarConst.result.lose)
	self.enemy_guild_dogfall:setVisible(result == GuildwarConst.result.dogfall)
end

-- Ã‹Â¢ÃÃ‚Ã‡¡ãÃˆÃ½Ã…Ã…ÃƒÃ»ÃŠÃ½Â¾Ã
function GuildwarMainWindow:refreshTopThreeRank(  )
    local rank_list = model:getGuildWarTopThreeRank()
    if rank_list == nil or next(rank_list) == nil then return end
    for i, v in ipairs(rank_list) do
        if not self.top3_item_list[v.rank] then
            local item = self:createSingleRankItem(v.rank)
            self.rank_container:addChild(item)
            self.top3_item_list[v.rank] = item
        end
        local item = self.top3_item_list[v.rank]
        if item then
            item:setPosition(-10,150 - (v.rank-1) * item:getContentSize().height)
            item.label:setString(v.name)
        end
    end
end

function GuildwarMainWindow:createSingleRankItem(i)
    local container = ccui.Layout:create()
    container:setAnchorPoint(cc.p(0,1))
    container:setContentSize(cc.size(180,40))
    local sp = createSprite(PathTool.getResFrame("common","common_300"..i),30,40/2,container)
    sp:setScale(0.5)
    container.sp = sp
    local label = createLabel(20,1,nil,60,18,"",container)
    label:setAnchorPoint(cc.p(0,0.5))
    label:setTextColor(cc.c4b(0x89,0xed,0xff,0xff))

    container.label = label
    return container
end

-- Â¾ÃÂµÃ£
function GuildwarMainWindow:refreshGuildWarPosition(  )
    self.position_vo_data = {}
    -- Â¿ÂªÃ•Â½Â»¨°Â½¨¢Ã‹Ã£ÃŠ¡ÀÂ²Ã…ÃÃ”ÃŠÂ¾Â¾ÃÂµÃ£
    if self.guildwar_status == GuildwarConst.status.processing or self.guildwar_status == GuildwarConst.status.settlement then
        if self.cur_position_type == GuildwarConst.positions.myself then
            self.position_vo_data = model:getMyGuildWarPositionList()
        elseif self.cur_position_type == GuildwarConst.positions.others then
            self.position_vo_data = model:getEnemyGuildWarPositionList()
        end
    end

    self.bottom_position_pos_y = 0
    for k,position_vo in pairs(self.position_vo_data) do
        local pos_data = Config.GuildWarData.data_position[position_vo.pos]
        if self.bottom_position_pos_y == 0 or pos_data.pos_y < self.bottom_position_pos_y then
            self.bottom_position_pos_y = pos_data.pos_y
        end
    end

    self:dynamicShowGuildWarPosition()
end
-- Â¶Â¯ÃŒÂ¬Â¼Ã“Ã”Ã˜Â¾ÃÂµÃ£ÃÃ”ÃŠÂ¾
function GuildwarMainWindow:dynamicShowGuildWarPosition(  )
    self:checkPositionMoveToPool()

    for k,position_vo in pairs(self.position_vo_data) do
        local pos_data = Config.GuildWarData.data_position[position_vo.pos]
        if pos_data and not self.position_pos[position_vo.pos] and self:checkPositionIsInDisplayRect(pos_data.pos_x, pos_data.pos_y) then
            local position_item = table.remove(self.position_pool, 1)
            if position_item == nil then
                position_item = GuildwarPositionItem.new()
                self.map_layer:addChild(position_item, 10)
            end
            position_item:setVisible(true)
            position_item:setData(position_vo, self.cur_position_type)
            position_item:setPosition(cc.p(pos_data.pos_x, pos_data.pos_y))
            table.insert(self.position_stack, position_item)
            self.position_pos[position_vo.pos] = true
        end
    end
end

-- Â¼¨¬Â²Ã¢Ã’Ã‘Â´Â´Â½¡§ÂµÃ„Â¾ÃÂµÃ£ÃŠÃ‡¡¤Ã±Ã¨¨Ã’Âª¡¤Ã…ÃˆÃ«Â»ÂºÂ´Ã¦Â³Ã˜
function GuildwarMainWindow:checkPositionMoveToPool(  )
    for i=#self.position_stack, 1, -1 do
        local item = self.position_stack[i]
        local pos_x, pos_y = item:getPosition()
        if not self:checkPositionIsInDisplayRect(pos_x, pos_y) then
            local pos = item:getPositionPos()
            item:setVisible(false)
            item:suspendAllActions()
            table.insert(self.position_pool, item)
            table.remove(self.position_stack, i)
            self.position_pos[pos] = nil
        end
    end
end
-- Â¸¨´Â¾ÃÂ¾ÃÂµÃ£ÃÂ»Ã–ÃƒÂ¼Ã†Ã‹Ã£ÃŠÃ‡¡¤Ã±Ã”ÃšÃÃ”ÃŠÂ¾Ã‡Ã¸Ã“¨°Ã–Â®Ã„Ãš
function GuildwarMainWindow:checkPositionIsInDisplayRect( pos_x, pos_y )
    local isIn = true
    local item_width = GuildwarPositionItem.Width
    local item_height = GuildwarPositionItem.Height
    local map_pos_x, map_pos_y = self.map_layer:getPosition()
    map_pos_x = math.abs(map_pos_x)
    map_pos_y = math.abs(map_pos_y)
    if (pos_x+item_width/2)<map_pos_x or (pos_x-item_width/2)>(map_pos_x+self.free_size.width) or (pos_y+item_height)<map_pos_y or pos_y>(map_pos_y+display.height) then
        isIn = false
    end
    return isIn
end

-- Ã‡ÃÂ»Â»Ã•¨®ÂµÃ˜
function GuildwarMainWindow:changeGuildwarPositionType(  )
    self.map_layer:setPosition(cc.p(self.map_layer_posX, (self.free_size.height - self.map_size.height + self.map_layer_posY)))
    for i=1,3 do
        local pos_y = (6-i)*1280
        local map_bg = self.map_bgs[i]
        if map_bg then
            map_bg:setPosition(cc.p(0, pos_y))
        end
    end
    -- Ã‹¨´Ã“ÃÂ¾ÃÂµÃ£Â¶Â¼¡¤Ã…ÃˆÃ«Â»ÂºÂ´Ã¦Â³Ã˜Ã–Ã
    for i=#self.position_stack, 1, -1 do
        local item = table.remove(self.position_stack, i)
        local pos = item:getPositionPos()
        item:setVisible(false)
        item:suspendAllActions()
        table.insert(self.position_pool, item)
        self.position_pos[pos] = nil
    end

    if self.cur_position_type == GuildwarConst.positions.myself then
        self.cur_position_type = GuildwarConst.positions.others
        self:refreshGuildWarPosition()
        self.change_scene_btn_label:setString(TI18N("ÂµÃ¡¤Â½Ã•¨®ÂµÃ˜"))
    else
        self.cur_position_type = GuildwarConst.positions.myself
        self.change_scene_btn_label:setString(TI18N("ÃÃ’¡¤Â½Ã•¨®ÂµÃ˜"))
        local myPostionData = model:getMyGuildWarPositionList()
        if next(myPostionData) == nil then -- ¡ÀÂ¾ÂµÃ˜ÃƒÂ»Ã“ÃÃÃ’¡¤Â½Â¾ÃÂµÃ£ÃŠÃ½Â¾ÃÂ£Â¬Ã”¨°Ã‡Ã«Ã‡¨®
            controller:requestMyGuildPositionData()
        else
            self:refreshGuildWarPosition()
        end
    end
end

function GuildwarMainWindow:register_event( )
	-- ÃÂªÃƒÃ‹Ã•Â½¡ÁÂ´ÃŒÂ¬¡ÀÃ¤Â»Â¯
     EventManager:getInstance():Bind(GuildwarEvent.UpdateGuildWarStatusEvent,self, function(status, flag) 
			-- ¡ÁÂ´ÃŒÂ¬Â´Ã“Â¿ÂªÃ•Â½Ã‡¡ãÂµÂ½Â¿ÂªÃ•Â½Âº¨®Â£Â¬Ã•Ã¢ÃŠ¡ÀÃ‡Ã«Ã‡¨®ÃŠÃ½Â¾Ã
			if self.guildwar_status <= 3 and status > 3 and flag == TRUE then
				controller:requestGuildWarData()
			end
            if status <= 3 then -- ¡ÁÂ´ÃŒÂ¬¡ÀÃ¤Â¸¨¹ÃÂªÂ¿ÂªÃ•Â½Ã‡¡ãÂµÃ„Â½Ã§ÃƒÃ¦ÃŠ¡ÀÂ£Â¬Â¹Ã˜¡ÀÃ•Ã–Â»Ã“ÃÂ¿ÂªÃ•Â½ÃŠ¡ÀÂ²Ã…Ã„ÃœÂ´¨°Â¿ÂªÂµÃ„Â½Ã§ÃƒÃ¦
                controller:openAttkLookWindow(false)
                controller:openAttkPositionWindow(false)
                controller:openGuildWarAwardWindow(false)
                controller:openBattleLogWindow(false)
                controller:openDefendLookWindow(false)
                controller:openGuildWarRankView(false)
            end
			self:refreshGuildWarStatus()
		end)
	-- Ã¨ºÃÂ¸ÃŠÃ½Â¾Ã
     EventManager:getInstance():Bind(GuildwarEvent.GuildWarEnemyPositionDataInitEvent,self, function( ) 
			self:refreshChallengeCount()
			self:refreshStarAndBuffInfo()
            self:refreshTopThreeRank()
			self:refreshGuildWarPosition()
		end)
	-- ÃŒÃ´Ã•Â½Â´ÃÃŠÃ½Â¸¨¹ÃÃ‚
     EventManager:getInstance():Bind(GuildwarEvent.UpdateGuildwarChallengeCountEvent,self, function( ) 
			self:refreshChallengeCount()
		end)
    -- Â»¨´Â´Â¡ÃŠÃ½Â¾ÃÂ¸¨¹ÃÃ‚
     EventManager:getInstance():Bind(GuildwarEvent.UpdateGuildWarBaseInfoEvent,self, function ( )
            self:refreshTopThreeRank()
            self:refreshStarAndBuffInfo()
        end)
    -- ÃŠÃ•ÂµÂ½ÃÃ’¡¤Â½Â¾ÃÂµÃ£ÃŠÃ½Â¾Ã
     EventManager:getInstance():Bind(GuildwarEvent.GetGuildWarMyPositionDataEvent,self, function (  )
            self:refreshGuildWarPosition()
        end)
    -- Âº¨¬ÂµÃ£Â¸¨¹ÃÃ‚
     EventManager:getInstance():Bind(GuildwarEvent.UpdateGuildWarRedStatusEvent,self, function(redtype, status)
            self:updateMainRedStatus(redtype, status)
        end)

	self.close_btn:addTouchEventListener(function(sender, event_type)
		if event_type == ccui.TouchEventType.ended then
			playQuitSound()
			controller:openMainWindow(false)
		end
	end) 

	self.explain_btn:addTouchEventListener(function(sender, event_type)
		if event_type == ccui.TouchEventType.ended then
			playCommonButtonSound()
            MainuiController:getInstance():openCommonExplainView(true, Config.GuildWarData.data_explain)
		end
	end)

	local function onTouchBegin(touch, event)
        self.last_point = nil
        self.is_move_map_layer = true
        return true
    end

    local function onTouchMoved(touch, event)
        self.last_point = touch:getDelta()
        if self:moveMapLayer(self.last_point.x,self.last_point.y) then
            self:dynamicShowGuildWarPosition()
            self:dynamicAddMapImage()
        end
    end

	local function onTouchEnded(touch, event)
        self.is_move_map_layer = false
    end

    local listener = cc.EventListenerTouchOneByOne:create()
    listener:registerScriptHandler(onTouchBegin,cc.Handler.EVENT_TOUCH_BEGAN)
    listener:registerScriptHandler(onTouchMoved,cc.Handler.EVENT_TOUCH_MOVED)
    listener:registerScriptHandler(onTouchEnded,cc.Handler.EVENT_TOUCH_ENDED)
    self.map_layer:getEventDispatcher():addEventListenerWithSceneGraphPriority(listener, self.map_layer)

    -- Â½Ã¸Â¹Â¥Ã’Â»Ã€Ã€
    self.attk_check_btn:addTouchEventListener(function(sender, event_type)
        customClickAction(sender, event_type)
        if event_type == ccui.TouchEventType.ended then
            playCommonButtonSound()
            controller:openAttkLookWindow(true)
        end
    end)
    -- Â¶Ã”Ã•¨®ÃÃ¡À¨ª
    self.battle_list_btn:addTouchEventListener(function(sender, event_type)
        customClickAction(sender, event_type)
        if event_type == ccui.TouchEventType.ended then
            playCommonButtonSound()
            controller:openBattleListWindow(true)
        end
    end)
    --Â¶Ã”Ã•¨®ÃÃ¡À¨ªÂ£¡§Ã†Â¥Ã…Ã¤Â³Ã‰Â¹Â¦Ã•Â¹ÃŠÂ¾Â½Ã§ÃƒÃ¦Â£Â©
    self.clash_list_btn:addTouchEventListener(function(sender, event_type)
        customClickAction(sender, event_type)
        if event_type == ccui.TouchEventType.ended then
            playCommonButtonSound()
            controller:openBattleListWindow(true)
            model:updateGuildWarRedStatus(GuildConst.red_index.guildwar_match, false)
        end
    end)
    -- Â½Ã¸Â¹Â¥ÃˆÃ•Ã–Â¾
    self.ally_atk_btn:addTouchEventListener(function(sender, event_type)
        customClickAction(sender, event_type)
        if event_type == ccui.TouchEventType.ended then
            playCommonButtonSound()
            controller:openBattleLogWindow(true)
            model:updateGuildWarRedStatus(GuildConst.red_index.guildwar_log, false)
        end
    end)
    -- Ã•Â½Â¼¡§Â½¡ÀÃ€Ã¸
    self.look_award_btn:addTouchEventListener(function(sender, event_type)
        customClickAction(sender, event_type)
        if event_type == ccui.TouchEventType.ended then
            playCommonButtonSound()
            controller:openGuildWarAwardWindow(true)
        end
    end)
    -- Ã¨ºÃÂ¸Ã…Ã…ÃƒÃ»
    self.rank_btn:addTouchEventListener(function(sender, event_type)
        customClickAction(sender, event_type)
        if event_type == ccui.TouchEventType.ended then
            playCommonButtonSound()
            controller:openGuildWarRankView(true)
        end
    end)
    -- Ã‡ÃÂ»Â»Ã•¨®ÂµÃ˜
    self.change_scene_btn:addTouchEventListener(function(sender, event_type)
        customClickAction(sender, event_type)
        if event_type == ccui.TouchEventType.ended then
            playCommonButtonSound()
            self:changeGuildwarPositionType()
        end;
    end)
    -- ¡ÀÂ¦ÃÃ¤¡ãÂ´Ã…Â¥
    registerButtonEventListener(self.award_box_btn, function (  )
        controller:openAwardBoxWindow(true)
    end, true)
    -- ¡ÀÂ¦ÃÃ¤¡ãÂ´Ã…Â¥
    registerButtonEventListener(self.look_box_btn, function (  )
        controller:openAwardBoxWindow(true)
    end, true)
end

function GuildwarMainWindow:updateMainRedStatus( redtype, status )
    if redtype == GuildConst.red_index.guildwar_match then
        addRedPointToNodeByStatus(self.clash_list_btn, status, -5, -5)
    elseif redtype == GuildConst.red_index.guildwar_log then
        addRedPointToNodeByStatus(self.ally_atk_btn, status, -5, -5)
    elseif redtype == GuildConst.red_index.guildwar_box then
        addRedPointToNodeByStatus(self.award_box_btn, status, -5, -5)
        addRedPointToNodeByStatus(self.look_box_btn, status, -5, -5)
    else
        local match_btn_status = model:checkRedIsShowByRedType(GuildConst.red_index.guildwar_match)
        addRedPointToNodeByStatus(self.clash_list_btn, match_btn_status, -5, -5)

        local atk_btn_status = model:checkRedIsShowByRedType(GuildConst.red_index.guildwar_log)
        addRedPointToNodeByStatus(self.ally_atk_btn, atk_btn_status, -5, -5)

        local box_btn_status = model:checkRedIsShowByRedType(GuildConst.red_index.guildwar_box)
        addRedPointToNodeByStatus(self.award_box_btn, box_btn_status, -5, -5)
        addRedPointToNodeByStatus(self.look_box_btn, box_btn_status, -5, -5)
    end
end

function GuildwarMainWindow:close_callback()
    self:openGuildWarSurplusTimer(false)

    for k,item in pairs(self.position_stack) do
        item:DeleteMe()
    end

    for k,item in pairs(self.position_pool) do
        item:DeleteMe()
    end

    EventManager:getInstance():UnBind(self)
    controller:openMainWindow(false)
end