-- --------------------------------------------------------------------
--
--
-- @description:
--      主界面小地图
-- --------------------------------------------------------------------
BattleDramaDropItem =
    class(
    'BattleDramaDropItem',
    function()
        return ccui.Layout:create()
    end
)
local hero_model = HeroController:getInstance():getModel()
BattleDramaDropItem.WIDTH = 512
BattleDramaDropItem.HEIGHT = 162
function BattleDramaDropItem:ctor(is_bool, is_bools, size)
    self:retain()
    self.size = size or cc.size(BattleDramaDropItem.WIDTH, BattleDramaDropItem.HEIGHT)
    self:setContentSize(self.size)
    self.root_wnd = createCSBNote(PathTool.getTargetCSB('battledrama/battle_drama_drop_item'))
   
    self:addChild(self.root_wnd)
    self.container = self.root_wnd:getChildByName('root')
    self.bg = self.container:getChildByName('Image_bg')
    self.des = createRichLabel(20,cc.c3b(98,53,43),cc.p(0.5,0.5),cc.p(256,90),nil,nil,400)
    self.container:addChild(self.des)
    self.name_label = self.container:getChildByName("name_label")
    self.item_scrollview = self.container:getChildByName("item_scrollview")
    self.item_scrollview:setScrollBarEnabled(false)
    self.item_scrollview:setSwallowTouches(false)
    self.item_list = {}
    self:registerEvent()
end

function BattleDramaDropItem:registerEvent()
end
function BattleDramaDropItem:setSize(height)
    self.size = cc.size(BattleDramaDropItem.WIDTH,height)
    self:setContentSize(self.size)
    self.bg:setContentSize(BattleDramaDropItem.WIDTH,height)
end
function BattleDramaDropItem:setData(is_single,data,str)
    self.des:setString("")
    self.item_scrollview:setVisible(true)
    self:setSize(BattleDramaDropItem.HEIGHT)
    if is_single == true then
        self:updateItem(data)
        self.name_label:setString(TI18N("当前关卡"))
        return
    end
      if str then
        self.name_label:setString(TI18N("挂机收益等级："))  
        self.des:setString(str)
        self:setSize(104)
        self.item_scrollview:setVisible(false)
        return
      end
      self.name_label:setString(TI18N("我要成嗨贼,稳队伍"))  
end
function BattleDramaDropItem:updateSprites(data)
    if not data then
        return
    end
    self.item_list={}
    local scale = 0.8
    local item = nil
    local item_width = HeroExhibitionItem.Width * scale * #data
    local hero_array = hero_model:getAllHeroArray()
    local total_width = #data * HeroExhibitionItem.Width * scale + #data * 10
    local max_width = math.max(self.item_scrollview:getContentSize().width, total_width)
    self.item_scrollview:setInnerContainerSize(cc.size(max_width, self.item_scrollview:getContentSize().height))
    --self.start_x = (self.item_scrollview:getContentSize().width - total_width) * 0.5
    self.start_x = 0
    local list = HeroController:getInstance():getModel():getMyPosList()
	local show_list = {}
	-- for k,v in pairs(list) do
	-- 	local hero_vo = HeroController:getInstance():getModel():getHeroById(v.id)
	-- 	if self.partner_id == 0 and #show_list == 0 then -- 没有默认选中的英雄则选中第一个
	-- 		self.partner_id = hero_vo.partner_id
	-- 	end
	-- 	t
    local cnt=1
    for i,v in pairs(list) do

            if not self.item_list[i] then
                item = HeroExhibitionItem.new(0.9, true)
                item:setAnchorPoint(0, 0.5)
                item:setScale(scale)
                self.item_scrollview:addChild(item)
                self.item_list[i] = item
            end
            item = self.item_list[i]
            if item then
                local _x = self.start_x + (cnt - 1) * (HeroExhibitionItem.Width * scale + 10) + 8
                item:setPosition(_x, self.item_scrollview:getContentSize().height / 2)
                local hero_vo = HeroController:getInstance():getModel():getHeroById(v.id)
                item:setData(hero_vo)
                cnt=cnt+1
            end

        

    end

end

function BattleDramaDropItem:updateItem(data)
    if not data then
        return
    end
    local scale = 0.8
    local item = nil
    local item_width = BackPackItem.Width * scale * #data

    local total_width = #data * BackPackItem.Width * scale + #data * 10
    local max_width = math.max(self.item_scrollview:getContentSize().width, total_width)
    self.item_scrollview:setInnerContainerSize(cc.size(max_width, self.item_scrollview:getContentSize().height))
    --self.start_x = (self.item_scrollview:getContentSize().width - total_width) * 0.5
    self.start_x = 0
    for i, v in ipairs(data) do
        delayRun(self.item_scrollview,i / display.DEFAULT_FPS,function ()
            if not self.item_list[i] then
                item = BackPackItem.new(true, true)
                item:setAnchorPoint(0, 0.5)
                item:setScale(scale)
                self.item_scrollview:addChild(item)
                self.item_list[i] = item
            end
            item = self.item_list[i]
            if item then
                local _x = self.start_x + (i - 1) * (BackPackItem.Width * scale + 10) + 8
                item:setPosition(_x, self.item_scrollview:getContentSize().height / 2)
                local data = {bid = v[1], num = v[2]}
                item:setBaseData(v[1], v[2],true)
                item:setDefaultTip()
            end

        end)

    end

end

function BattleDramaDropItem:DeleteMe()
    if self.item_list and next(self.item_list or {}) ~= nil then
        for i, v in ipairs(self.item_list) do
            if v.DeleteMe then
                v:DeleteMe()
            end
        end
    end
    self:removeAllChildren()
    self:removeFromParent()
    self:release()
end
